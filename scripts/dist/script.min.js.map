{"version":3,"sources":["script.js"],"names":["tasksContainer","document","getElementById","addTaskBtn","inputText","taskList","addTask","addEventListener","console","log","value","newTask","createElement","alert","classList","add","draggable","push","today","currentDateLabel","innerText","Date","getFullYear","appendChild","month","day","capitalizeFirstLetter","selectedPriority","priorityLabel","string","slice","checkBox","charAt","toUpperCase","type","checkMark","textField","remove","readOnly","btnDiv","editBtn","focus","deleteBtn","removedTask","indexOf","splice","draggedTask","e","preventDefault","target","afterElement","getDragAfterElement","querySelector","container","y","_toConsumableArray","element","child","reduce","closest","box","getBoundingClientRect","Number","NEGATIVE_INFINITY","offset","insertBefore","clientY","draggableElements","event","key"],"mappings":"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","file":"script.min.js","sourcesContent":["const tasksContainer = document.getElementById(\"tasks\");\nconst addTaskBtn = document.getElementById(\"add\");\nconst inputText = document.getElementById(\"task-input\");\n\nlet taskList = [];\n\n// Adding Task Function\naddTaskBtn.addEventListener(\"click\", addTask);\ninputText.addEventListener(\"keypress\", function (event) {\n  if (event.key === \"Enter\") {\n    addTask();\n  }\n});\n\nfunction addTask() {\n  if (inputText.value == \"\") {\n    alert(\"Kindly Enter a Task Name!!\");\n    return;\n  }\n  console.log(inputText.value);\n\n  //   Create div for the new added task\n  const newTask = document.createElement(\"div\");\n  newTask.classList.add(\"task\");\n  newTask.classList.add(\"draggable\");\n  newTask.draggable = true;\n  taskList.push(newTask);\n  console.log(taskList);\n\n  //Add Date Label\n  const currentDateLabel = document.createElement(\"span\");\n  currentDateLabel.classList.add(\"label\", \"date\");\n  currentDateLabel.innerText = \"Date: \" + getCurrentDate();\n  newTask.appendChild(currentDateLabel);\n\n  function getCurrentDate() {\n    const today = new Date();\n    const year = today.getFullYear();\n    const month = today.getMonth() + 1;\n    const day = today.getDate();\n    return `${year}-${month < 10 ? \"0\" + month : month}-${\n      day < 10 ? \"0\" + day : day\n    }`;\n  }\n\n  //Add Priority Label\n  const priorityDropdown = document.getElementById(\"priorityDropdown\");\n  const selectedPriority = priorityDropdown.value;\n  const priorityLabel = document.createElement(\"span\");\n  priorityLabel.classList.add(\"label\", \"priority\", selectedPriority);\n  priorityLabel.innerText =\n    capitalizeFirstLetter(selectedPriority) + \" Priority\";\n  console.log(selectedPriority);\n  newTask.appendChild(priorityLabel);\n\n  function capitalizeFirstLetter(string) {\n    return string.charAt(0).toUpperCase() + string.slice(1);\n  }\n\n  // Add checkbox to each task\n  const checkBox = document.createElement(\"input\");\n  checkBox.type = \"checkbox\";\n  newTask.appendChild(checkBox);\n  const checkMark = document.createElement(\"span\");\n  checkMark.classList.add(\"checkmark\");\n  newTask.appendChild(checkMark);\n\n  checkBox.addEventListener(\"change\", function () {\n    if (checkBox.checked == true) {\n      textField.classList.add(\"completed\");\n      //   textField.classList.remove(\"task-text\");\n    } else {\n      //   textField.classList.add(\"task-text\");\n      textField.classList.remove(\"completed\");\n    }\n  });\n\n  // Add task input\n  const textField = document.createElement(\"input\");\n  textField.type = \"text\";\n  textField.classList.add(\"task-text\");\n  textField.readOnly = true;\n  textField.value = inputText.value;\n  newTask.appendChild(textField);\n\n  //Blur task\n  textField.addEventListener(\"blur\", function () {\n    if (textField.value == \"\") {\n      newTask.remove();\n    }\n    textField.readOnly = true;\n  });\n\n  //Create div for holding buttons\n  const btnDiv = document.createElement(\"div\");\n  btnDiv.classList.add(\"action-btn\");\n  newTask.appendChild(btnDiv);\n\n  //Add edit button\n  const editBtn = document.createElement(\"button\");\n  editBtn.classList.add(\"edit\");\n  //   editBtn.innerHTML =\n  //     '<img src=\"../assets/imgs/edit-icon.svg\" alt=\"edit task\" />';\n  btnDiv.appendChild(editBtn);\n\n  editBtn.addEventListener(\"click\", function () {\n    textField.readOnly = false;\n    textField.focus();\n  });\n\n  //Add delete button\n  const deleteBtn = document.createElement(\"button\");\n  deleteBtn.classList.add(\"delete\");\n  //   deleteBtn.innerHTML =\n  //     '<img src=\"../assets/imgs/delete-icon.svg\" alt=\"delete task\" />';\n  btnDiv.appendChild(deleteBtn);\n\n  deleteBtn.addEventListener(\"click\", function () {\n    const removedTask = taskList.indexOf(newTask);\n    taskList.splice(removedTask, 1);\n    newTask.remove();\n    console.log(taskList);\n  });\n\n  //Drag and Drop Implementation\n  let draggedTask = null;\n\n  tasksContainer.addEventListener(\"dragstart\", (e) => {\n    if (e.target.classList.contains(\"task\")) {\n      draggedTask = e.target;\n      draggedTask.classList.add(\"dragging\");\n      e.dataTransfer.effectAllowed = \"move\";\n    }\n  });\n\n  tasksContainer.addEventListener(\"dragover\", (e) => {\n    e.preventDefault();\n    const afterElement = getDragAfterElement(tasksContainer, e.clientY);\n    const draggable = document.querySelector(\".task.dragging\");\n\n    if (draggable) {\n      if (afterElement == null) {\n        tasksContainer.appendChild(draggable);\n      } else {\n        tasksContainer.insertBefore(draggable, afterElement);\n      }\n    }\n  });\n\n  tasksContainer.addEventListener(\"dragend\", () => {\n    if (draggedTask) {\n      draggedTask.classList.remove(\"dragging\");\n      draggedTask = null;\n    }\n  });\n\n  function getDragAfterElement(container, y) {\n    const draggableElements = [\n      ...container.querySelectorAll(\".task:not(.dragging)\"),\n    ];\n\n    return draggableElements.reduce(\n      (closest, child) => {\n        const box = child.getBoundingClientRect();\n        const offset = y - box.top - box.height / 2;\n\n        if (offset < 0 && offset > closest.offset) {\n          return { offset, element: child };\n        } else {\n          return closest;\n        }\n      },\n      { offset: Number.NEGATIVE_INFINITY }\n    ).element;\n  }\n\n  tasksContainer.appendChild(newTask);\n  inputText.value = \"\";\n}\n"]}